# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiDataRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'band_width': 'int',
        'bitrate': 'int',
        'modulation': 'str',
        'spread_factor': 'int'
    }

    attribute_map = {
        'band_width': 'bandWidth',
        'bitrate': 'bitrate',
        'modulation': 'modulation',
        'spread_factor': 'spreadFactor'
    }

    def __init__(self, band_width=None, bitrate=None, modulation=None, spread_factor=None):  # noqa: E501
        """ApiDataRate - a model defined in Swagger"""  # noqa: E501

        self._band_width = None
        self._bitrate = None
        self._modulation = None
        self._spread_factor = None
        self.discriminator = None

        if band_width is not None:
            self.band_width = band_width
        if bitrate is not None:
            self.bitrate = bitrate
        if modulation is not None:
            self.modulation = modulation
        if spread_factor is not None:
            self.spread_factor = spread_factor

    @property
    def band_width(self):
        """Gets the band_width of this ApiDataRate.  # noqa: E501


        :return: The band_width of this ApiDataRate.  # noqa: E501
        :rtype: int
        """
        return self._band_width

    @band_width.setter
    def band_width(self, band_width):
        """Sets the band_width of this ApiDataRate.


        :param band_width: The band_width of this ApiDataRate.  # noqa: E501
        :type: int
        """

        self._band_width = band_width

    @property
    def bitrate(self):
        """Gets the bitrate of this ApiDataRate.  # noqa: E501


        :return: The bitrate of this ApiDataRate.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this ApiDataRate.


        :param bitrate: The bitrate of this ApiDataRate.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def modulation(self):
        """Gets the modulation of this ApiDataRate.  # noqa: E501


        :return: The modulation of this ApiDataRate.  # noqa: E501
        :rtype: str
        """
        return self._modulation

    @modulation.setter
    def modulation(self, modulation):
        """Sets the modulation of this ApiDataRate.


        :param modulation: The modulation of this ApiDataRate.  # noqa: E501
        :type: str
        """

        self._modulation = modulation

    @property
    def spread_factor(self):
        """Gets the spread_factor of this ApiDataRate.  # noqa: E501


        :return: The spread_factor of this ApiDataRate.  # noqa: E501
        :rtype: int
        """
        return self._spread_factor

    @spread_factor.setter
    def spread_factor(self, spread_factor):
        """Sets the spread_factor of this ApiDataRate.


        :param spread_factor: The spread_factor of this ApiDataRate.  # noqa: E501
        :type: int
        """

        self._spread_factor = spread_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDataRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDataRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
