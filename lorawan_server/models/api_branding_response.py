# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiBrandingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'footer': 'str',
        'logo': 'str',
        'registration': 'str'
    }

    attribute_map = {
        'footer': 'footer',
        'logo': 'logo',
        'registration': 'registration'
    }

    def __init__(self, footer=None, logo=None, registration=None):  # noqa: E501
        """ApiBrandingResponse - a model defined in Swagger"""  # noqa: E501

        self._footer = None
        self._logo = None
        self._registration = None
        self.discriminator = None

        if footer is not None:
            self.footer = footer
        if logo is not None:
            self.logo = logo
        if registration is not None:
            self.registration = registration

    @property
    def footer(self):
        """Gets the footer of this ApiBrandingResponse.  # noqa: E501


        :return: The footer of this ApiBrandingResponse.  # noqa: E501
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this ApiBrandingResponse.


        :param footer: The footer of this ApiBrandingResponse.  # noqa: E501
        :type: str
        """

        self._footer = footer

    @property
    def logo(self):
        """Gets the logo of this ApiBrandingResponse.  # noqa: E501


        :return: The logo of this ApiBrandingResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this ApiBrandingResponse.


        :param logo: The logo of this ApiBrandingResponse.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def registration(self):
        """Gets the registration of this ApiBrandingResponse.  # noqa: E501


        :return: The registration of this ApiBrandingResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this ApiBrandingResponse.


        :param registration: The registration of this ApiBrandingResponse.  # noqa: E501
        :type: str
        """

        self._registration = registration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiBrandingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiBrandingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
