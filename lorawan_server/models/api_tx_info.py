# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lorawan_server.models.api_data_rate import ApiDataRate  # noqa: F401,E501


class ApiTXInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code_rate': 'str',
        'data_rate': 'ApiDataRate',
        'frequency': 'str',
        'immediately': 'bool',
        'mac': 'str',
        'power': 'int',
        'timestamp': 'int'
    }

    attribute_map = {
        'code_rate': 'codeRate',
        'data_rate': 'dataRate',
        'frequency': 'frequency',
        'immediately': 'immediately',
        'mac': 'mac',
        'power': 'power',
        'timestamp': 'timestamp'
    }

    def __init__(self, code_rate=None, data_rate=None, frequency=None, immediately=None, mac=None, power=None, timestamp=None):  # noqa: E501
        """ApiTXInfo - a model defined in Swagger"""  # noqa: E501

        self._code_rate = None
        self._data_rate = None
        self._frequency = None
        self._immediately = None
        self._mac = None
        self._power = None
        self._timestamp = None
        self.discriminator = None

        if code_rate is not None:
            self.code_rate = code_rate
        if data_rate is not None:
            self.data_rate = data_rate
        if frequency is not None:
            self.frequency = frequency
        if immediately is not None:
            self.immediately = immediately
        if mac is not None:
            self.mac = mac
        if power is not None:
            self.power = power
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def code_rate(self):
        """Gets the code_rate of this ApiTXInfo.  # noqa: E501

        Code-rate.  # noqa: E501

        :return: The code_rate of this ApiTXInfo.  # noqa: E501
        :rtype: str
        """
        return self._code_rate

    @code_rate.setter
    def code_rate(self, code_rate):
        """Sets the code_rate of this ApiTXInfo.

        Code-rate.  # noqa: E501

        :param code_rate: The code_rate of this ApiTXInfo.  # noqa: E501
        :type: str
        """

        self._code_rate = code_rate

    @property
    def data_rate(self):
        """Gets the data_rate of this ApiTXInfo.  # noqa: E501

        Data-rate.  # noqa: E501

        :return: The data_rate of this ApiTXInfo.  # noqa: E501
        :rtype: ApiDataRate
        """
        return self._data_rate

    @data_rate.setter
    def data_rate(self, data_rate):
        """Sets the data_rate of this ApiTXInfo.

        Data-rate.  # noqa: E501

        :param data_rate: The data_rate of this ApiTXInfo.  # noqa: E501
        :type: ApiDataRate
        """

        self._data_rate = data_rate

    @property
    def frequency(self):
        """Gets the frequency of this ApiTXInfo.  # noqa: E501

        Frequency.  # noqa: E501

        :return: The frequency of this ApiTXInfo.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApiTXInfo.

        Frequency.  # noqa: E501

        :param frequency: The frequency of this ApiTXInfo.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def immediately(self):
        """Gets the immediately of this ApiTXInfo.  # noqa: E501

        Immediately.  # noqa: E501

        :return: The immediately of this ApiTXInfo.  # noqa: E501
        :rtype: bool
        """
        return self._immediately

    @immediately.setter
    def immediately(self, immediately):
        """Sets the immediately of this ApiTXInfo.

        Immediately.  # noqa: E501

        :param immediately: The immediately of this ApiTXInfo.  # noqa: E501
        :type: bool
        """

        self._immediately = immediately

    @property
    def mac(self):
        """Gets the mac of this ApiTXInfo.  # noqa: E501

        HEX encoded gateway MAC.  # noqa: E501

        :return: The mac of this ApiTXInfo.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this ApiTXInfo.

        HEX encoded gateway MAC.  # noqa: E501

        :param mac: The mac of this ApiTXInfo.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def power(self):
        """Gets the power of this ApiTXInfo.  # noqa: E501

        TX power.  # noqa: E501

        :return: The power of this ApiTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ApiTXInfo.

        TX power.  # noqa: E501

        :param power: The power of this ApiTXInfo.  # noqa: E501
        :type: int
        """

        self._power = power

    @property
    def timestamp(self):
        """Gets the timestamp of this ApiTXInfo.  # noqa: E501

        Gateway internal timestamp.  # noqa: E501

        :return: The timestamp of this ApiTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ApiTXInfo.

        Gateway internal timestamp.  # noqa: E501

        :param timestamp: The timestamp of this ApiTXInfo.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiTXInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiTXInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
