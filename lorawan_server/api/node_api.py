# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lorawan_server.api_client import ApiClient


class NodeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate(self, dev_eui, body, **kwargs):  # noqa: E501
        """Activate (re)activates the node (only when ABP is set to true).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate(dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :param ApiActivateNodeRequest body: (required)
        :return: ApiActivateNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_with_http_info(dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_with_http_info(dev_eui, body, **kwargs)  # noqa: E501
            return data

    def activate_with_http_info(self, dev_eui, body, **kwargs):  # noqa: E501
        """Activate (re)activates the node (only when ABP is set to true).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_with_http_info(dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :param ApiActivateNodeRequest body: (required)
        :return: ApiActivateNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `activate`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['devEUI'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/{devEUI}/activation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiActivateNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create(self, body, **kwargs):  # noqa: E501
        """Create creates the given node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateNodeRequest body: (required)
        :return: ApiCreateNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create creates the given node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateNodeRequest body: (required)
        :return: ApiCreateNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCreateNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, dev_eui, **kwargs):  # noqa: E501
        """Delete deletes the node matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :return: ApiDeleteNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """Delete deletes the node matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :return: ApiDeleteNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['devEUI'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/{devEUI}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDeleteNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, dev_eui, **kwargs):  # noqa: E501
        """Get returns the node for the requested DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :return: ApiGetNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """Get returns the node for the requested DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :return: ApiGetNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['devEUI'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/{devEUI}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_activation(self, dev_eui, **kwargs):  # noqa: E501
        """GetActivation returns the current activation details of the node (OTAA and ABP).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :return: ApiGetNodeActivationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_activation_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_activation_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_activation_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """GetActivation returns the current activation details of the node (OTAA and ABP).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :return: ApiGetNodeActivationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get_activation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['devEUI'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/{devEUI}/activation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetNodeActivationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_frame_logs(self, dev_eui, **kwargs):  # noqa: E501
        """GetFrameLogs returns the uplink / downlink frame log for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frame_logs(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :param str limit: Max number of frames to return in the result-set.
        :param str offset: Offset of the result-set (for pagination).
        :return: ApiGetFrameLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_frame_logs_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_frame_logs_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_frame_logs_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """GetFrameLogs returns the uplink / downlink frame log for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frame_logs_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :param str limit: Max number of frames to return in the result-set.
        :param str offset: Offset of the result-set (for pagination).
        :return: ApiGetFrameLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_frame_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get_frame_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['devEUI'] = params['dev_eui']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/{devEUI}/frames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetFrameLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_random_dev_addr(self, **kwargs):  # noqa: E501
        """GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_dev_addr(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiGetRandomDevAddrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_random_dev_addr_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_random_dev_addr_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_random_dev_addr_with_http_info(self, **kwargs):  # noqa: E501
        """GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_dev_addr_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiGetRandomDevAddrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_random_dev_addr" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/getRandomDevAddr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetRandomDevAddrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_by_application_id(self, application_id, **kwargs):  # noqa: E501
        """ListByApplicationID lists the nodes by the given application ID, sorted by the name of the node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_by_application_id(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str limit: Max number of nodes to return in the result-set.
        :param str offset: Offset of the result-set (for pagination).
        :param str search: Search against name or DevEUI.
        :return: ApiListNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_by_application_id_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_by_application_id_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def list_by_application_id_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """ListByApplicationID lists the nodes by the given application ID, sorted by the name of the node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_by_application_id_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str limit: Max number of nodes to return in the result-set.
        :param str offset: Offset of the result-set (for pagination).
        :param str search: Search against name or DevEUI.
        :return: ApiListNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'limit', 'offset', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_by_application_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `list_by_application_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationID'] = params['application_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/applications/{applicationID}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, dev_eui, body, **kwargs):  # noqa: E501
        """Update updates the node matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :param ApiUpdateNodeRequest body: (required)
        :return: ApiUpdateNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(dev_eui, body, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, dev_eui, body, **kwargs):  # noqa: E501
        """Update updates the node matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: (required)
        :param ApiUpdateNodeRequest body: (required)
        :return: ApiUpdateNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['devEUI'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/nodes/{devEUI}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiUpdateNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
